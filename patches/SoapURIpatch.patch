--- Lite.pm	2006-10-02 10:20:02.000000000 -0700
+++ NewLite.pm	2006-10-02 10:18:42.000000000 -0700
@@ -175,6 +175,13 @@
   return [$name, {'xsi:type' => 'xsd:string', %$attr}, SOAP::Utils::encode_data($value)];
 }
 
+sub as_anyURI {
+  my $self = shift;
+  my($value, $name, $type, $attr) = @_;
+  die "String value expected instead of @{[ref $value]} reference\n" if ref $value;
+  return [$name, {'xsi:type' => 'xsd:anyURI', %$attr}, SOAP::Utils::encode_data($value)];
+}
+
 sub as_undef { $_[1] ? '1' : '0' }
 
 sub as_boolean {
@@ -196,6 +203,7 @@
 sub anyTypeValue { 'ur-type' }
 
 sub as_string; *as_string = \&SOAP::XMLSchemaSOAP1_1::Deserializer::as_string;
+sub as_anyURI; *as_anyURI = \&SOAP::XMLSchemaSOAP1_1::Deserializer::as_anyURI;
 sub as_boolean; *as_boolean = \&SOAP::XMLSchemaSOAP1_1::Deserializer::as_boolean;
 sub as_hex { shift; my $value = shift; $value =~ s/([a-zA-Z0-9]{2})/chr oct '0x'.$1/ge; $value }
 sub as_ur_type { $_[1] }
@@ -244,6 +252,7 @@
 sub as_long;        *as_long = \&SOAP::XMLSchema1999::Serializer::as_long;
 sub as_float;       *as_float = \&SOAP::XMLSchema1999::Serializer::as_float;
 sub as_string;      *as_string = \&SOAP::XMLSchema1999::Serializer::as_string;
+sub as_anyURI;      *as_anyURI = \&SOAP::XMLSchema1999::Serializer::as_anyURI;
 # TODO - QNames still don't work for 2001 schema!
 sub as_QName;       *as_QName = \&SOAP::XMLSchema1999::Serializer::as_string;
 sub as_hex;         *as_hex = \&as_hexBinary;
@@ -277,6 +286,7 @@
 sub anyTypeValue { 'anyType' }
 
 sub as_string; *as_string = \&SOAP::XMLSchema1999::Deserializer::as_string;
+sub as_anyURI; *as_anyURI = \&SOAP::XMLSchema1999::Deserializer::as_anyURI;
 sub as_boolean; *as_boolean = \&SOAP::XMLSchemaSOAP1_2::Deserializer::as_boolean;
 sub as_base64Binary; *as_base64Binary = \&SOAP::XMLSchemaSOAP1_2::Deserializer::as_base64;
 sub as_hexBinary; *as_hexBinary = \&SOAP::XMLSchema1999::Deserializer::as_hex;
@@ -813,7 +823,7 @@
           'boolean' => 
 	      [90, sub { $_[0] =~ /^(true|false)$/i; }, 'as_boolean'],
           'anyURI' => 
-	      [95, sub { $_[0] =~ /^(urn:)|(http:\/\/)/i; }, 'as_anyURI'],
+	      [95, sub { $_[0] =~ /^(urn:|http:\/\/)/i; }, 'as_anyURI'],
           'string' => 
 	      [100, sub {1}, 'as_string'],
       },
