Index: lib/SOAP/Lite.pm
===================================================================
RCS file: /cvsroot/soaplite/soaplite-dist/lib/SOAP/Lite.pm,v
retrieving revision 1.19
diff -u -r1.19 Lite.pm
--- lib/SOAP/Lite.pm	8 Oct 2004 21:31:08 -0000	1.19
+++ lib/SOAP/Lite.pm	11 Oct 2004 00:22:17 -0000
@@ -1033,6 +1033,15 @@
 
 sub encode_array {
   my($self, $array, $name, $type, $attr) = @_;
+
+  # If typing is disabled, just serialize each of the array items
+  # with no type information, each using the specified name,
+  # and do not crete a wrapper array tag.
+  if (!$self->autotype) {
+      $name ||= gen_name;
+      return map {$self->encode_object($_, $name)} @$array;
+  }
+
   my $items = 'item'; 
 
 # TD: add support for multidimensional, partially transmitted and sparse arrays
@@ -1042,7 +1051,7 @@
   for (@items) { $arraytype = $_->[1]->{'xsi:type'} || '-'; $types{$arraytype}++ }
   $arraytype = sprintf "%s\[$num]", keys %types > 1 || $arraytype eq '-' ? qualify(xsd => $self->xmlschemaclass->anyTypeValue) : $arraytype;
 
-  $type = qualify($self->encprefix => 'Array') if $self->autotype && !defined $type;
+  $type = qualify($self->encprefix => 'Array') if !defined $type;
 
   return [$name || qualify($self->encprefix => 'Array'), 
           {qualify($self->encprefix => 'arrayType') => $arraytype, 'xsi:type' => $self->maptypetouri($type), %$attr},
@@ -1058,10 +1067,9 @@
     warn qq!Cannot encode @{[$name ? "'$name'" : 'unnamed']} element as 'hash'. Will be encoded as 'map' instead\n! if $^W;
     return $self->as_map($hash, $name || gen_name, $type, $attr);
   }
-
   $type = 'SOAPStruct' if $self->autotype && !defined($type) && exists $self->maptype->{SOAPStruct};
   return [$name || gen_name, 
-          {'xsi:type' => $self->maptypetouri($type), %$attr},
+          $self->autotype ? {'xsi:type' => $self->maptypetouri($type), %$attr} : { %$attr },
           [map {$self->encode_object($hash->{$_}, $_)} keys %$hash], 
           $self->gen_id($hash)
   ];
Index: t/01-core.t
===================================================================
RCS file: /cvsroot/soaplite/soaplite-dist/t/01-core.t,v
retrieving revision 1.8
diff -u -r1.8 01-core.t
--- t/01-core.t	7 Oct 2004 05:46:42 -0000	1.8
+++ t/01-core.t	11 Oct 2004 00:22:17 -0000
@@ -10,7 +10,7 @@
 use strict;
 use Test;
 
-BEGIN { plan tests => 30 }
+BEGIN { plan tests => 37 }
 
 use SOAP::Lite;
 
@@ -249,3 +249,37 @@
   $ret = $deserializer->deserialize($input);
   ok("one" eq $ret->result->{'complexFoo'}{'arrayFoo'});
 }
+
+{
+    print "Serialization of doc/lit arrays\n";
+    # check array serialization with autotyping disabled
+    my $serializer = SOAP::Serializer->new;
+    $serializer->autotype(0);
+
+    my $hash = {
+	"scalar" => 1,
+	"array" => [ 2, 3],
+	"hash" => {
+	    "scalar" => 4,
+	    "array" => [ 5, 6],
+	}
+    };
+
+    my $xml = $serializer->serialize($hash);
+    
+    ok($xml =~ m|<c-gensym\d+ [^>]*><hash><array>5</array><array>6</array><scalar>4</scalar></hash><array>2</array><array>3</array><scalar>1</scalar></c-gensym\d+>|);
+
+    # deserialize it and check that a similar object is created
+    my $deserializer = SOAP::Deserializer->new;
+    
+    my $obj = $deserializer->deserialize($xml)->root;
+
+    ok(1, $obj->{"scalar"});
+    my @arr= @{$obj->{"array"}};
+    ok(2, $arr[0]);
+    ok(3, $arr[1]);
+    ok(4, $obj->{"hash"}{"scalar"});
+    @arr = @{$obj->{"hash"}{"array"}};
+    ok(5, $arr[0]);
+    ok(6, $arr[1]);
+}
